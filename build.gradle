
apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

mainClassName = 'org.opt4j.core.start.Opt4J'

ext {
	dateISO = new Date().format("yyyy-MM-dd")
}

allprojects {
	group = 'org.opt4j'

	repositories {
		mavenCentral()
	}
}

def descriptions = [
	'opt4j-core' : 'The core module of Opt4J',
	'opt4j-benchmarks' : 'A set of benchmarks for Opt4J',
	'opt4j-operators' : 'A set of operators for Opt4J',
	'opt4j-optimizers' : 'A set of optimizers for Opt4J',
	'opt4j-satdecoding' : 'The SAT decoding module for Opt4J',
	'opt4j-tutorial' : 'The tutorial classes for Opt4J',
	'opt4j-viewer' : 'The viewer module for Opt4J'
]

subprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'
	jacoco {
		toolVersion = "0.8.5"
	}


	version = parent.version

	sourceSets {
		integrationTest {
			java {
				compileClasspath += main.output + main.compileClasspath + test.compileClasspath
				runtimeClasspath += main.output + main.compileClasspath + test.compileClasspath
				srcDir file('src/test-integration/java')
			}
			resources.srcDir file('src/test-integration/resources')
		}
	}
	task integrationTest(type: Test) {
		testClassesDirs = sourceSets.integrationTest.output.classesDirs
		classpath = sourceSets.integrationTest.runtimeClasspath
	}

	task sourcesJar(type: Jar, dependsOn:classes) {
		from sourceSets.main.allSource
		classifier = 'sources'
	}

	task javadocJar(type: Jar, dependsOn:javadoc) {
		from javadoc.destinationDir
		classifier = 'javadoc'
	}

	jacocoTestReport {
		reports {
			xml.enabled true
		}
	}
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	dependsOn = subprojects.test
	reports {		
		xml.enabled = true		
	}
}

dependencies {
	runtime project(':opt4j-core')
	runtime project(':opt4j-satdecoding')
	runtime project(':opt4j-operators')
	runtime project(':opt4j-optimizers')
	runtime project(':opt4j-benchmarks')
	runtime project(':opt4j-viewer')
	runtime project(':opt4j-tutorial')
}

jar {
	manifest {
		attributes 'Main-Class': mainClassName
	}
}

task fatjar(dependsOn: subprojects.jar, type: Jar) {
	destinationDirectory = new File(project.buildDir, 'fatjar')
	from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it)
		} }
	manifest {
		attributes 'Main-Class': mainClassName
		attributes 'SplashScreen-Image': 'img/splash.png'
	}
}

applicationDefaultJvmArgs = [
	"-splash:opt4j-core/src/main/resources/img/splash.png"
]

