
apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'jacoco'



mainClassName = 'org.opt4j.core.start.Opt4J'

ext {
	dateISO = new Date().format("yyyy-MM-dd")
}

allprojects {
	group = 'org.opt4j'

	jacoco {
		toolVersion = "0.8.5"
	}

	repositories {
		mavenCentral()
	}
}

def descriptions = [
	'opt4j-core' : 'The core module of Opt4J',
	'opt4j-benchmarks' : 'A set of benchmarks for Opt4J',
	'opt4j-operators' : 'A set of operators for Opt4J',
	'opt4j-optimizers' : 'A set of optimizers for Opt4J',
	'opt4j-satdecoding' : 'The SAT decoding module for Opt4J',
	'opt4j-tutorial' : 'The tutorial classes for Opt4J',
	'opt4j-viewer' : 'The viewer module for Opt4J'
]

subprojects {
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'
	jacoco {
		toolVersion = "0.8.5"
	}


	version = parent.version


	jacocoTestReport {
		getAdditionalSourceDirs().setFrom(sourceSets.main.allSource.srcDirs)
		getSourceDirectories().setFrom(sourceSets.main.allSource.srcDirs)
		getClassDirectories().setFrom(sourceSets.main.output)
		reports {

			html.enabled true
			html.destination(file("${buildDir}/reports/jacoco"))
		}
	}
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	dependsOn = subprojects.test
	getAdditionalSourceDirs().setFrom(subprojects.sourceSets.main.allSource.srcDirs)
	getSourceDirectories().setFrom(subprojects.sourceSets.main.allSource.srcDirs)
	getClassDirectories().setFrom(subprojects.sourceSets.main.output)
	getExecutionData().setFrom(subprojects.jacocoTestReport.executionData)
	reports {
		html.enabled true
		html.destination(file("${buildDir}/reports/jacoco"))
		xml.enabled = true
		csv.enabled = false
	}


	doFirst {
		getExecutionData().setFrom(executionData.findAll {
			it.exists()
		})
	}
	/*
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['ptolemy/**', 'org/opt4j/tutorial/**', 'org/opt4j/viewer/**', 'org/opt4j/core/config/visualization/**'])
		})
	}
	*/
}

dependencies {
	runtime project(':opt4j-core')
	runtime project(':opt4j-satdecoding')
	runtime project(':opt4j-operators')
	runtime project(':opt4j-optimizers')
	runtime project(':opt4j-benchmarks')
	runtime project(':opt4j-viewer')
	runtime project(':opt4j-tutorial')
}

jar {
	manifest {
		attributes 'Main-Class': mainClassName
	}
}

task fatjar(dependsOn: subprojects.jar, type: Jar) {
	destinationDirectory = new File(project.buildDir, 'fatjar')
	from {
		configurations.runtime.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest {
		attributes 'Main-Class': mainClassName
		attributes 'SplashScreen-Image': 'img/splash.png'
	}
}

applicationDefaultJvmArgs = [
	"-splash:opt4j-core/src/main/resources/img/splash.png"
]

