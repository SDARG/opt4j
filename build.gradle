plugins {
	id 'com.github.kt3k.coveralls' version '2.6.3'
}
apply plugin: 'base'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

mainClassName = 'org.opt4j.core.start.Opt4J'

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
	ignoreExitValue true
    }
    version=stdout.toString().trim()
    if (version.indexOf('-') >= 0 || version.isEmpty())
    	version += '-SNAPSHOT'
    return version
}
version=getVersionName()

def stagingURL = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
def snapshotURL = 'https://oss.sonatype.org/content/repositories/snapshots/'

ext {
	dateISO = new Date().format("yyyy-MM-dd")
}

allprojects {
    group = 'org.opt4j'
   
    repositories {
    	mavenCentral()
    }
    
    configurations {
         deployerJars
    }
    
    dependencies {
         deployerJars "org.apache.maven.wagon:wagon-http:2.6"
    }
}

def descriptions = [
	'opt4j-core' : 'The core module of Opt4J', 
	'opt4j-benchmarks' : 'A set of benchmarks for Opt4J',
	'opt4j-operators' : 'A set of operators for Opt4J', 
	'opt4j-optimizers' : 'A set of optimizers for Opt4J',
	'opt4j-satdecoding' : 'The SAT decoding module for Opt4J', 
	'opt4j-tutorial' : 'The tutorial classes for Opt4J',
	'opt4j-viewer' : 'The viewer module for Opt4J'
]

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.6 
	targetCompatibility = 1.6
    
    version = parent.version

	task sourcesJar(type: Jar, dependsOn:classes) {
		from sourceSets.main.allSource 
		classifier = 'sources' 
	} 

	task javadocJar(type: Jar, dependsOn:javadoc) {
		from javadoc.destinationDir 
		classifier = 'javadoc' 
	}

	artifacts { 
		archives jar
		archives sourcesJar 
		archives javadocJar 
	}

	signing {
	    required = { gradle.taskGraph.hasTask("uploadArchives") }
	    sign configurations.archives
	}
	
	uploadArchives {
	    repositories {
	        mavenDeployer {
	            configuration = configurations.deployerJars
	            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
	 
	            repository(url: stagingURL) {
	              authentication(userName: sonatypeUsername, password: sonatypePassword)
	            }
	 
	            pom.project {
	               name 'Opt4J'
	               packaging 'jar'
	               description descriptions[project.name]
	               url 'http://www.opt4j.org'
	 
	               scm {
	                   url 'http://hg.code.sf.net/p/opt4j/hgroot'
	                   connection 'http://hg.code.sf.net/p/opt4j/hgroot'
	               }
	 
	               licenses {
	                   license {
	                       name 'GNU Lesser General Public License'
	                       url 'http://www.gnu.org/licenses/lgpl.txt'
	                       distribution 'repo'
	                   }
	               }
	 
	               developers {
	                   developer {
	                       id 'lukasiewycz'
	                       name 'Martin Lukasiewycz'
	                   }
	                   developer {
	                       id 'reimann'
	                       name 'Felix Reimann'
	                   }
	                   developer {
	                       id 'glass'
	                       name 'Michael Glass'
	                   }
	               }
	           }
	        }
	    }
	}

	jacocoTestReport {
		additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
		sourceDirectories = files(sourceSets.main.allSource.srcDirs)
		classDirectories =  files(sourceSets.main.output)
		reports {
		    html.enabled = true
		    xml.enabled = true
		    csv.enabled = false
		}
	}
}

compileJava  {
   	def currentJvm = org.gradle.internal.jvm.Jvm.current()
	println "Current JVM: "+currentJvm
}

uploadArchives.doFirst {
	println "Sonatype Username: "+sonatypeUsername 
	println "Private Key: "+project.ext.get("signing.secretKeyRingFile")
	println "Private Key ID: "+project.ext.get("signing.keyId")
}

dependencies {
	runtime project(':opt4j-core')
	runtime project(':opt4j-satdecoding')
	runtime project(':opt4j-operators')
	runtime project(':opt4j-optimizers')
	runtime project(':opt4j-benchmarks')
	runtime project(':opt4j-viewer')
	runtime project(':opt4j-tutorial')
}

jar {
	manifest { 
		attributes 'Main-Class': mainClassName
	}
}

boolean isSnapshot() {
	project.version.contains('SNAPSHOT')
}

import org.apache.tools.ant.filters.ReplaceTokens

task copyWebsite(type: Copy){
	from('src/main/website/') {
		include '**/*.html'
		filter(ReplaceTokens, tokens: [version : project.version, date : project.dateISO])
	}
	from('src/main/website/') {
		exclude '**/*.html'
	}
	into 'build/website/'
}

task copyJavadocStyle(type: Copy, dependsOn: 'alldocs') {
	if(JavaVersion.current().java6) {
		from ('src/javadocStyles/1.6/resources') {
			include '*.png'
		}
	} else {
		from ('src/javadocStyles/1.7/resources') {
			include '*.png'
		}
	}
	into 'build/docs/javadoc/resources'
}

task copyJavadoc(type: Copy, dependsOn: 'copyJavadocStyle'){
	from new File(project.buildDir, 'docs/javadoc')
	into 'build/website/javadoc/'+version
}

task copyTutorial(type: Copy, dependsOn: ":opt4j-tutorial:tutorial"){
	from new File(project(':opt4j-tutorial').buildDir,'tutorial')
	into 'build/website/documentation/'+version
}

task website(dependsOn: [copyWebsite, copyJavadoc, copyTutorial]) {}

/* for now ignore all javadoc errors in case of Java 8 */
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
    }
}

task alldocs(type: Javadoc) {
	title = "Opt4J version $version Project API Documentation"
	destinationDir = new File(project.buildDir, 'docs/javadoc')
	if(JavaVersion.current().java6) {
	options.stylesheetFile = file('src/javadocStyles/1.6/stylesheet.css')
	} else {
		options.stylesheetFile = file('src/javadocStyles/1.7/stylesheet.css')
	}
	
	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC
	options.links 'http://docs.oracle.com/javase/6/docs/api/','http://google.github.io/guice/api-docs/4.1/javadoc/'
	options.linkSource = true

	subprojects.each {subproject ->
		source subproject.sourceSets.main.java
	}
	exclude 'ptolemy/**'

	subprojects.each { subproject ->
		if( classpath ) {
			classpath += subproject.sourceSets.main.output + subproject.sourceSets.main.compileClasspath
		} else {
			classpath = subproject.sourceSets.main.output + subproject.sourceSets.main.compileClasspath
		}
	}

}

task release(dependsOn: [distZip,website] ){}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

task fatjar(dependsOn: subprojects.jar, type: Jar) {
    destinationDir = new File(project.buildDir, 'fatjar')
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
		attributes 'Main-Class': mainClassName
		attributes 'SplashScreen-Image': 'img/splash.png'
    }
}

import org.apache.tools.ant.filters.ReplaceTokens
applicationDistribution.from("src/distribution") {
    filter(ReplaceTokens, tokens: [version : project.version, date : project.dateISO])
}

applicationDefaultJvmArgs = ["-splash:opt4j-core/src/main/resources/img/splash.png"]

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['ptolemy/**', 'org/opt4j/tutorial/**', 'org/opt4j/viewer/**', 'org/opt4j/core/config/visualization/**'])
        })
    }
}

coveralls {
	sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
tasks.coveralls {
  group = 'Documentation'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
  onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}
