import org.apache.tools.ant.filters.*
import java.util.regex.*

dependencies {
	compile parent.project('opt4j-core')
	compile parent.project('opt4j-satdecoding')
	compile parent.project('opt4j-optimizers')
	compile parent.project('opt4j-operators')
	compile parent.project('opt4j-viewer')
}

task filterSources(type: Copy) {
	from('src/main/java') {
        include '**/*.java'
		filter { String line -> 
			if(line.matches("(import|@Suppress|package|@Parent).*")){
				'';
			} else {
				line.replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;")
			}
		}
		def regexp = new org.apache.tools.ant.types.RegularExpression()
  		regexp.pattern = '[^ \n\t\r]+'
  		filter(org.apache.tools.ant.filters.LineContainsRegExp, regexps:[regexp])
	}
	into new File(project.buildDir,'tutorialsrc')
}

task tutorial(type: Copy, dependsOn: filterSources) {
	def Pattern p = Pattern.compile(".*(@file\\(([\\w/\\.]+)\\)).*");
	from('src/main/tutorial'){
		include '**/*html'
		filter { String line -> 
			Matcher m = p.matcher(line);
			if(m.matches()){
				String contents = new File( project.buildDir,'tutorialsrc/' + m.group(2) ).getText( 'UTF-8' )
				line.substring(0, m.start(1)) + contents + line.substring(m.end(1), line.length());
			} else {
				line;
			}
		}
		def myProps = new Properties()
		file("src/main/tutorial/javadoc.properties").withInputStream{myProps.load(it);}
    	filter(ReplaceTokens, tokens: myProps)
		filter(ReplaceTokens, tokens: [version : project.version, date : project.dateISO])
	}
	from('src/main/tutorial'){
		exclude '**/*html'
		exclude '**/*properties'
	}
	into 'build/tutorial'
}
